package thelm.rslargepatterns;

import net.minecraft.creativetab.CreativeTabs;
import net.minecraft.item.ItemStack;
import net.minecraftforge.fml.common.Mod;
import net.minecraftforge.fml.common.Mod.EventHandler;
import net.minecraftforge.fml.common.Mod.Instance;
import net.minecraftforge.fml.common.ModMetadata;
import net.minecraftforge.fml.common.SidedProxy;
import net.minecraftforge.fml.common.event.FMLInitializationEvent;
import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
import net.minecraftforge.fml.relauncher.Side;
import net.minecraftforge.fml.relauncher.SideOnly;
import thelm.rslargepatterns.item.ItemLargePattern;
import thelm.rslargepatterns.proxy.CommonProxy;

@Mod(
		modid = RSLargePatterns.MOD_ID,
		name = RSLargePatterns.NAME,
		version = RSLargePatterns.VERSION,
		dependencies = RSLargePatterns.DEPENDENCIES
		)
public class RSLargePatterns {

	public static final String MOD_ID = "rslargepatterns";
	public static final String NAME = "Refined Storage Large Patterns";
	public static final String VERSION = "1.12.2-1.0.0.0";
	public static final String DEPENDENCIES = "";
	public static final String GUI_FACTORY = "thelm.rslargepatterns.client.gui.GuiRSLargePatternsConfigFactory";
	public static final CreativeTabs CREATIVE_TAB = new CreativeTabs("rslargepatterns") {
		@SideOnly(Side.CLIENT)
		@Override
		public ItemStack createIcon() {
			return new ItemStack(ItemLargePattern.INSTANCE);
		}
	};
	@Instance
	public static RSLargePatterns instance;
	@SidedProxy(clientSide = "thelm.rslargepatterns.proxy.ClientProxy", serverSide = "thelm.rslargepatterns.proxy.CommonProxy", modId = RSLargePatterns.MOD_ID)
	public static CommonProxy proxy;
	public static ModMetadata metadata;

	@EventHandler
	public void firstMovement(FMLPreInitializationEvent event) {
		metadata = event.getModMetadata();
		metadata.autogenerated = false;
		metadata.version = VERSION;
		metadata.authorList.add("TheLMiffy1111");
		metadata.description = "An Refined Storage addon that adds patterns with more than 9 inputs.";

		proxy.register(event);
	}

	@EventHandler
	public void secondMovement(FMLInitializationEvent event) {
		proxy.register(event);
	}
}
